package irc.client;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

/**
 * A class that represents the GUI for the IRC client.
 */
public class IRC extends JFrame {

    private final DefaultTableModel model = new DefaultTableModel(new String[]{"Info", "Message"}, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    private final PrintWriter writer;
    private final BufferedReader reader;
    private final Socket socket;
    public String username;
    public User user;
    private JButton messageSendButton;
    private JPanel panel;
    private JEditorPane messageInputPane;
    private JTextField usernameInputField;
    private JButton usernameSendButton;
    private JButton room7Button;
    private JButton room1Button;
    private JButton room2Button;
    private JButton room3Button;
    private JButton room4Button;
    private JButton room5Button;
    private JButton room6Button;
    private JScrollPane scrollPane;
    private JTable messageTable;
    private JTextField roomInputField;
    private JLabel loginLabel;
    private JLabel roomLabel;
    private JButton[] roomButtons = new JButton[7];

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Creates a new IRC GUI.
     *
     * @param writer The writer for the connection.
     * @param reader The reader for the connection.
     * @param socket The socket for the connection.
     */
    public IRC(PrintWriter writer, BufferedReader reader, Socket socket) {
        this.writer = writer;
        this.reader = reader;
        this.socket = socket;
        setupFrame();
    }

    /**
     * Reads the messages from the server and adds them to the table.
     */
    public void readMessage() {
        String line;
        while (true) {
            try {

                line = reader.readLine();
                int size = Integer.parseInt(line);

                char[] cbuf = new char[size];
                reader.read(cbuf, 0, size);

                String[] received = new String(cbuf).split("/");

                try {
                    addRowToTable(received[0], received[1]);
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("Error: " + e.getMessage());
                }

            } catch (IOException e) {
                if (socket.isClosed()) {
                    Thread.currentThread().interrupt();
                    break;
                } else {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Disconnects from the server and closes the socket.
     */
    private void disconnectAndClose() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                try {
                    quit();
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                System.exit(0);
            }
        });
    }

    /**
     * Sends the message about the room change.
     *
     * @param room The new room number.
     */
    private void changeRoom(Integer room) {
        roomButtons[room - 1].setEnabled(false);
        roomButtons[user.roomNumber - 1].setEnabled(true);
        user.roomNumber = room;
        roomInputField.setText(room.toString());

        String time = new SimpleDateFormat("[HH:mm:ss]").format(new Date());
        addRowToTable(time + " SYSTEM", "Zmieniłeś pokój na " + room);

        writer.printf("%c", 'c');
        writer.printf("%04d", room.toString().length());
        writer.printf("%d", room);
    }

    /**
     * Sends the message about the user quitting.
     */
    private void quit() {
        writer.printf("%c", 'q');
    }

    /**
     * Seds the message from the user input.
     *
     * @param message
     * @return true if the message was sent successfully.
     */
    private boolean sendMessage(String message) {
        writer.printf("%c", 's');
        byte[] messageBytes = message.getBytes(StandardCharsets.UTF_8);
        writer.printf("%04d", messageBytes.length);
        writer.printf("%s", message);
        return true;
    }

    /**
     * Adds a row to the table.
     *
     * @param info    The info to be added.
     * @param message The message to be added.
     */
    private void addRowToTable(String info, String message) {
        model.addRow(new String[]{info, message});
    }

    /**
     * Sends the message to the server about the new user.
     *
     * @return true if the user was logged in successfully.
     */
    private boolean loginNewUser() {
        username = getUsername();
        Integer roomNumber = getRoom();
        if (username == null || roomNumber == null) {
            return false;
        }
        user = new User(username, roomNumber);

        String message = String.format("%04d", username.length() + 2) + username + ' ' + roomNumber;
        writer.printf("%c", 'l');
        writer.printf("%s", message);
        return true;
    }

    /**
     * Sets up the frame.
     */
    private void setupFrame() {
        setContentPane(panel);
        setMinimumSize(new Dimension(740, 520));
        setVisible(true);
        setupListeners();
        setupTable();
        disconnectAndClose();
        disableButtons();
    }

    /**
     * Validate username and return it.
     *
     * @return username.
     */
    private String getUsername() {
        String username = usernameInputField.getText();
        if (username.length() < 1) {
            JOptionPane.showMessageDialog(null, "Puste pole login", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (username.length() > 11) {
            JOptionPane.showMessageDialog(null, "Zbyt długa nazwa użytkownika", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (username.equals("SYSTEM")) {
            JOptionPane.showMessageDialog(null, "Niedozwolona nazwa użytkownika", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        return username.replaceAll(" ", "_");
    }

    /**
     * Validate room number and return it.
     *
     * @return room number.
     */
    private Integer getRoom() {
        String room = roomInputField.getText();
        int roomNumber;
        if (room.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Puste pole numer pokoju", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        } else {
            try {
                roomNumber = Integer.parseInt(room);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Numer pokoju musi być cyfrą między 1 a 7", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            if (roomNumber < 1 || roomNumber > 7) {
                JOptionPane.showMessageDialog(null, "Numer pokoju musi być cyfrą między 1 a 7", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        return roomNumber;
    }

    /**
     * Disables all buttons.
     */
    private void disableButtons() {
        messageSendButton.setEnabled(false);
        room1Button.setEnabled(false);
        room2Button.setEnabled(false);
        room3Button.setEnabled(false);
        room4Button.setEnabled(false);
        room5Button.setEnabled(false);
        room6Button.setEnabled(false);
        room7Button.setEnabled(false);
    }

    /**
     * Enables all buttons.
     */
    private void enableButtons() {
        messageSendButton.setEnabled(true);
        room1Button.setEnabled(true);
        room2Button.setEnabled(true);
        room3Button.setEnabled(true);
        room4Button.setEnabled(true);
        room5Button.setEnabled(true);
        room6Button.setEnabled(true);
        room7Button.setEnabled(true);
    }

    /**
     * Sets up table.
     */
    private void setupTable() {
        messageTable.setModel(model);
        model.setColumnCount(2);
        messageTable.setFocusable(false);
        messageTable.setRowSelectionAllowed(false);
        messageTable.setShowGrid(false);
        messageTable.setIntercellSpacing(new Dimension(0, 0));
        messageTable.getTableHeader().setUI(null);
        messageTable.getColumnModel().getColumn(0).setMinWidth(200);
        messageTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        messageTable.getColumnModel().getColumn(0).setMaxWidth(200);

        MyCellRender render = new MyCellRender(messageTable);
        messageTable.getColumnModel().getColumn(1).setCellRenderer(render);
    }

    /**
     * Sets up listeners.
     */
    private void setupListeners() {
        usernameSendButton.addActionListener(e -> {
            if (loginNewUser()) {
                usernameInputField.setEnabled(false);
                roomInputField.setEnabled(false);
                usernameSendButton.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Zalogowano", "Success", JOptionPane.INFORMATION_MESSAGE);

                enableButtons();
                roomButtons[user.roomNumber - 1].setEnabled(false);
            }
        });

        roomButtons = new JButton[]{room1Button, room2Button, room3Button, room4Button, room5Button, room6Button, room7Button};

        for (int i = 0; i < roomButtons.length; i++) {
            int finalI = i;
            roomButtons[i].addActionListener(e -> changeRoom(finalI + 1));
        }

        messageSendButton.addActionListener(e -> {
            String message = messageInputPane.getText();
            if (!message.isEmpty()) {
                if (sendMessage(message)) {
                    messageInputPane.setText("");
                }
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(11, 3, new Insets(8, 8, 8, 8), -1, 1));
        panel.setBackground(new Color(-5000269));
        panel.setForeground(new Color(-7829368));
        scrollPane = new JScrollPane();
        Font scrollPaneFont = this.$$$getFont$$$("Courier New", Font.PLAIN, 14, scrollPane.getFont());
        if (scrollPaneFont != null) scrollPane.setFont(scrollPaneFont);
        panel.add(scrollPane, new GridConstraints(2, 0, 7, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        messageTable = new JTable();
        Font messageTableFont = this.$$$getFont$$$("Courier New", Font.PLAIN, 14, messageTable.getFont());
        if (messageTableFont != null) messageTable.setFont(messageTableFont);
        scrollPane.setViewportView(messageTable);
        usernameInputField = new JTextField();
        Font usernameInputFieldFont = this.$$$getFont$$$("Courier New", -1, 16, usernameInputField.getFont());
        if (usernameInputFieldFont != null) usernameInputField.setFont(usernameInputFieldFont);
        usernameInputField.setText("");
        panel.add(usernameInputField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        usernameSendButton = new JButton();
        Font usernameSendButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, usernameSendButton.getFont());
        if (usernameSendButtonFont != null) usernameSendButton.setFont(usernameSendButtonFont);
        usernameSendButton.setText("Loguj");
        panel.add(usernameSendButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messageSendButton = new JButton();
        Font messageSendButtonFont = this.$$$getFont$$$("Consolas", Font.BOLD, 16, messageSendButton.getFont());
        if (messageSendButtonFont != null) messageSendButton.setFont(messageSendButtonFont);
        messageSendButton.setText("Wyślij");
        panel.add(messageSendButton, new GridConstraints(10, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        room7Button = new JButton();
        Font room7ButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, room7Button.getFont());
        if (room7ButtonFont != null) room7Button.setFont(room7ButtonFont);
        room7Button.setText("Pokój 7");
        room7Button.setVerticalAlignment(0);
        room7Button.setVerticalTextPosition(0);
        panel.add(room7Button, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        room1Button = new JButton();
        Font room1ButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, room1Button.getFont());
        if (room1ButtonFont != null) room1Button.setFont(room1ButtonFont);
        room1Button.setText("Pokój 1");
        panel.add(room1Button, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        room2Button = new JButton();
        Font room2ButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, room2Button.getFont());
        if (room2ButtonFont != null) room2Button.setFont(room2ButtonFont);
        room2Button.setText("Pokój 2");
        panel.add(room2Button, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        room3Button = new JButton();
        Font room3ButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, room3Button.getFont());
        if (room3ButtonFont != null) room3Button.setFont(room3ButtonFont);
        room3Button.setText("Pokój 3");
        panel.add(room3Button, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        room4Button = new JButton();
        Font room4ButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, room4Button.getFont());
        if (room4ButtonFont != null) room4Button.setFont(room4ButtonFont);
        room4Button.setText("Pokój 4");
        panel.add(room4Button, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        room5Button = new JButton();
        Font room5ButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, room5Button.getFont());
        if (room5ButtonFont != null) room5Button.setFont(room5ButtonFont);
        room5Button.setText("Pokój 5");
        panel.add(room5Button, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        room6Button = new JButton();
        Font room6ButtonFont = this.$$$getFont$$$("Consolas", Font.PLAIN, 16, room6Button.getFont());
        if (room6ButtonFont != null) room6Button.setFont(room6ButtonFont);
        room6Button.setText("Pokój 6");
        panel.add(room6Button, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        roomInputField = new JTextField();
        Font roomInputFieldFont = this.$$$getFont$$$("Courier New", -1, 16, roomInputField.getFont());
        if (roomInputFieldFont != null) roomInputField.setFont(roomInputFieldFont);
        panel.add(roomInputField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        loginLabel = new JLabel();
        Font loginLabelFont = this.$$$getFont$$$("Consolas", Font.BOLD, 18, loginLabel.getFont());
        if (loginLabelFont != null) loginLabel.setFont(loginLabelFont);
        loginLabel.setText("Login:");
        panel.add(loginLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        roomLabel = new JLabel();
        Font roomLabelFont = this.$$$getFont$$$("Consolas", Font.BOLD, 18, roomLabel.getFont());
        if (roomLabelFont != null) roomLabel.setFont(roomLabelFont);
        roomLabel.setText("Numer pokoju:");
        panel.add(roomLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setHorizontalScrollBarPolicy(31);
        scrollPane1.setVerticalScrollBarPolicy(20);
        panel.add(scrollPane1, new GridConstraints(9, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 58), null, null, 0, false));
        messageInputPane = new JEditorPane();
        Font messageInputPaneFont = this.$$$getFont$$$("Courier New", -1, 14, messageInputPane.getFont());
        if (messageInputPaneFont != null) messageInputPane.setFont(messageInputPaneFont);
        scrollPane1.setViewportView(messageInputPane);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
